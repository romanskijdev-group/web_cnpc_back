package module

import (
	marshallernotification "cnpc_backend/core/module/notification/marshaller"
	protoobj "cnpc_backend/core/proto"
	"cnpc_backend/core/typescore"
	"context"
	"errors"
	"log"
	"time"
)

// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ö–æ–¥–µ
func (s *UserAccountServiceProto) userDetected(ctx context.Context, userObj *typescore.UsersProviderControl, isNewUser bool, userAuthReqAInfo *typescore.UserAuthReqAccountReq) (*protoobj.LogInInfoRes, error) {
	var err error

	if isNewUser {
		userObj, err = s.newUser(ctx, userObj, userAuthReqAInfo)
		if err != nil {
			log.Println("üî¥ error UserLoginAccount: newUser: ", err)
			return nil, err
		}
	} else {
		err := s.userAuthNewInfoCombat(userObj, userAuthReqAInfo)
		if err != nil {
			log.Println("üî¥ error UserLoginAccount: userAuthNewInfoCombat: ", err)
			return nil, err
		}
	}

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ö–æ–¥–µ
	return s.generateToken(userObj, isNewUser)
}

func (s *UserAccountServiceProto) userAuthNewInfoCombat(userObj *typescore.UsersProviderControl, userAuthReqAInfo *typescore.UserAuthReqAccountReq) error {
	ctx, cancel := context.WithTimeout(context.Background(), time.Second*30)
	defer cancel()
	if userObj == nil {
		return errors.New("user_not_finder")
	}
	// –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
	if userObj.IsBlocked != nil {
		if *userObj.IsBlocked {
			return errors.New("user_blocked")
		}
	}

	var newUserIp *string
	updateIpLogin := false

	if userAuthReqAInfo.DetectorIPStruct != nil && userAuthReqAInfo.DetectorIPStruct.IP != nil {
		if userObj.LastIP == nil {
			newUserIp = userAuthReqAInfo.DetectorIPStruct.IP
		} else if *userObj.LastIP != *userAuthReqAInfo.DetectorIPStruct.IP {
			newUserIp = userAuthReqAInfo.DetectorIPStruct.IP
		}
	}
	if newUserIp == nil {
		newUserIp = userObj.LastIP
	} else {
		updateIpLogin = true
	}

	userObj.LastIP = newUserIp
	lastLogin := time.Now().UTC()
	userObj.LastLogin = &lastLogin

	if updateIpLogin {
		categoryNotifyNewDevice := typescore.DeviceNewNotifyCategory
		// –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
		textNotify := "New device login: " + *newUserIp
		// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
		notifyParamsPr := marshallernotification.NotifyParamsSerialization(&typescore.NotifyParams{
			Text:          &textNotify,
			SystemUserIDs: []*string{userObj.SystemID},
			Category:      &categoryNotifyNewDevice,
		})
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–æ–≤–æ–º IP-–∞–¥—Ä–µ—Å–µ
		_, err := s.ipc.Clients.NotificationServiceProto.NotifyUser(ctx, notifyParamsPr)
		if err != nil {
			log.Println("üî¥ error UserLoginAccount: NotifyUser: ", err)
		}
	}

	errW := s.ipc.Database.UsersActions.UpdateUserLastLoginInfoDB(ctx, userObj)
	if errW != nil {
		log.Println("üî¥ error UserLoginAccount: UpdateUserLastLoginInfoDB: ", errW.Err)
	}

	return nil
}

// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
func (s *UserAccountServiceProto) emailLogin(req *typescore.UserAuthReqAccountReq) (*typescore.UsersProviderControl, bool, error) {
	// –ï—Å–ª–∏ —Ç–∏–ø –≤—Ö–æ–¥–∞ - Email
	if req.Email == nil {
		return nil, true, errors.New("user_not_finder")
	}

	/// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –∏–∑ Redis
	err := s.ipc.RedisClient.CheckAndDeleteFromRedis(*req.Email, *req.TemporaryPassword, typescore.TempPassRedisType)
	if err != nil {
		log.Println("üî¥ error UserLoginAccount: CheckAndDeleteFromRedis: ", err)
		return nil, true, err
	}

	findObjUer := &typescore.UsersProviderControl{
		Email: req.Email,
	}

	userObj := s.findUserInfo(findObjUer)
	if userObj == nil || userObj.SystemID == nil {
		return findObjUer, true, nil
	}
	return userObj, false, nil
}

// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
func (s *UserAccountServiceProto) vkLogin(req *typescore.UserAuthReqAccountReq) (*typescore.UsersProviderControl, bool, error) {
	// –ï—Å–ª–∏ —Ç–∏–ø –≤—Ö–æ–¥–∞ - Email
	if req.VKID == nil {
		return nil, true, errors.New("user_not_finder")
	}

	findObjUer := &typescore.UsersProviderControl{
		VKID: req.VKID,
	}

	userObj := s.findUserInfo(findObjUer)
	if userObj == nil || userObj.SystemID == nil {
		return findObjUer, true, nil
	}
	return userObj, false, nil
}
