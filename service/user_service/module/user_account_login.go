package module

import (
	marshallerusers "cnpc_backend/core/module/user/users/marshaller"
	protoobj "cnpc_backend/core/proto"
	"cnpc_backend/core/typescore"
	"cnpc_backend/core/utilscore"
	"context"
	"errors"
	"log"
	"time"
)

// –ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –≤—Ö–æ–¥–∞ –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (s *UserAccountServiceProto) authUser(req *typescore.UserAuthReqAccountReq) (*typescore.UsersProviderControl, bool, error) {
	if req == nil {
		return nil, true, errors.New("invalid_request_body")
	}
	if req.AuthType == nil {
		return nil, true, errors.New("invalid login type")
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤—Ö–æ–¥–∞
	switch *req.AuthType {
	case typescore.AuthTokenType:
		// –ï—Å–ª–∏ —Ç–∏–ø –≤—Ö–æ–¥–∞ - —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
		return s.authTokenLogin(req)
	//case typescore.TelegramType:
	//	return s.telegramLogin(req)
	case typescore.EmailType:
		// –ï—Å–ª–∏ —Ç–∏–ø –≤—Ö–æ–¥–∞ - Email
		return s.emailLogin(req)
	case typescore.VKType:
		// –ï—Å–ª–∏ —Ç–∏–ø –≤—Ö–æ–¥–∞ - VK
		return s.vkLogin(req)
	default:
		// –ï—Å–ª–∏ —Ç–∏–ø –≤—Ö–æ–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
		return nil, true, errors.New("invalid login type")
	}
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
func (s *UserAccountServiceProto) authTokenLogin(userAuthReqAccountReq *typescore.UserAuthReqAccountReq) (*typescore.UsersProviderControl, bool, error) {
	if userAuthReqAccountReq.SystemID == nil {
		return nil, true, errors.New("user_not_finder")
	}

	findObjUer := &typescore.UsersProviderControl{
		SystemID: userAuthReqAccountReq.SystemID,
	}
	userObj := s.findUserInfo(findObjUer)

	if userObj == nil || userObj.SystemID == nil {
		return findObjUer, true, nil
	}
	return userObj, false, nil
}

// –ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
func (s *UserAccountServiceProto) findUserInfo(userAuthReqAccountReq *typescore.UsersProviderControl) *typescore.UsersProviderControl {
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	userObj, errW := s.ipc.Database.UsersActions.GetUserDB(ctx, userAuthReqAccountReq)
	if errW != nil {
		log.Println("üî¥ error findUserInfo UserLoginAccount: GetUserDB: ", errW.Err)
		userObj = nil
	}
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ nil, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
	return userObj
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ö–æ–¥–µ
func (s *UserAccountServiceProto) generateToken(userBaseData *typescore.UsersProviderControl, isNewUser bool) (*protoobj.LogInInfoRes, error) {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	tokenObj, errW := s.ipc.Modules.RestAuth.TokenRestAuth.GetAuthToken(userBaseData)
	if errW != nil {
		log.Println("üî¥ error UserLoginAccount: GetAuthToken: ", errW.Err)
		return nil, errW.Err // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω
	}

	// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	return marshallerusers.LogInInfoResSerialization(&typescore.LogInInfoRes{
		TokenAuth: tokenObj, // –¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
		Params: &typescore.UserParamsLogin{
			Language:  userBaseData.Language,              // –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			IsNewUser: utilscore.PointerToBool(isNewUser), // –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–º
		},
	}), nil
}
