package handler

import (
	restauthcore "cnpc_backend/core/module/rest_auth"
	"cnpc_backend/core/typescore"
	"cnpc_backend/rest_user_service/types"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/go-chi/chi/v5"
	"log"
	"net/http"
	"reflect"
)

type WrapHandlerParams struct {
	CustomFunc               func(w http.ResponseWriter, r *http.Request, userObj *typescore.UsersProviderControl, detectorIp *typescore.DetectorIPStruct) (interface{}, *uint64, *typescore.WEvent)
	Ipc                      *types.InternalProviderControl // ipc
	UserAuthorizationChecked bool                           // –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	ModuleRestAuth           *restauthcore.ModuleRestAuth

	EnabledUserRole []*string // —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ç–æ–¥—É
}

func WrapHandlerF(p WrapHandlerParams) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		response := &typescore.Response{}
		ip := r.RemoteAddr

		detectorIP, _, err := detectIpPositions(p.Ipc, ip)
		if err != nil {
			errW := &typescore.WEvent{
				Err:  errors.New("block ip"),
				Text: "block_ip",
			}
			sendResponse(w, response, errW)
			return
		}

		r, userObj, errW := p.ModuleRestAuth.CheckerRestAuth.ControlAuthRest(r, &typescore.ControlAuthRestParams{
			UserAuthorizationChecked: p.UserAuthorizationChecked,
		})

		if errW != nil {
			fmt.Println("üî¥ Error in CheckAuthRest: ", errW)
			sendResponse(w, response, errW)
			return
		}

		data, totalCount, errW := p.CustomFunc(w, r, userObj, detectorIP)
		if errW != nil {
			sendResponse(w, response, errW)
			return
		}

		response.Success = true
		response.Data = data
		response.TotalCount = totalCount

		sendResponse(w, response, nil)
	}
}

func sendResponse(w http.ResponseWriter, response *typescore.Response, errW *typescore.WEvent) {
	log.Println("sendResponse")
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ Content-Type
	if _, ok := w.Header()["Content-Type"]; !ok {
		w.Header().Set("Content-Type", "application/json")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
	contentType := w.Header().Get("Content-Type")
	log.Println("Content-Type: ", contentType)

	if errW != nil {
		if errW.Err != nil {
			errW.Error = errW.Err.Error()
		}
		response.Success = false
		response.Error = errW
		response.Count = 0
		w.WriteHeader(http.StatusBadRequest) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 400
	} else {
		w.WriteHeader(http.StatusOK) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 200
	}

	v := reflect.ValueOf(response.Data)
	if v.Kind() == reflect.Slice {
		response.Count = v.Len()
	}

	switch contentType {
	case "text/event-stream":
	case "application/octet-stream":
	default:
		// –î–ª—è application/json –∏ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤
		if err := json.NewEncoder(w).Encode(response); err != nil {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ HTTP –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –≤ JSON: %v", err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		}
	}
}

// –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
func RegisterRoutesRelief(router *chi.Mux, routes []types.RouteParams, ipc *types.InternalProviderControl) {
	for _, rout := range routes {
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ nil
		userRole := string(typescore.UserRole)

		userAuthorizationChecked := true
		if rout.UserAuthorizationChecked != nil {
			userAuthorizationChecked = *rout.UserAuthorizationChecked
		}

		params := WrapHandlerParams{
			Ipc:                      ipc,
			CustomFunc:               rout.HandlerFunc,
			UserAuthorizationChecked: userAuthorizationChecked,

			EnabledUserRole: []*string{&userRole},
			ModuleRestAuth:  ipc.Modules.RestAuth,
		}

		println(fmt.Sprintf("Register Method [%s] %s", rout.Method, rout.Url))
		// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
		switch rout.Method {
		case http.MethodPost:
			router.Post(rout.Url, WrapHandlerF(params))
		case http.MethodGet:
			router.Get(rout.Url, WrapHandlerF(params))
		case http.MethodDelete:
			router.Delete(rout.Url, WrapHandlerF(params))
		case http.MethodPut:
			router.Put(rout.Url, WrapHandlerF(params))
		}
	}
}

func detectIpPositions(ipc *types.InternalProviderControl, ip string) (*typescore.DetectorIPStruct, string, error) {
	detectorIPStruct, err := ipc.Modules.IPDetectorModule.IpWorker(ip)
	if err != nil {
		log.Println("üíî error get ip info0", err)
		return nil, "", err
	}
	if detectorIPStruct == nil {
		log.Println("üíî error get ip info1", err)
		return nil, "", err
	}
	if detectorIPStruct.IsINBlackList == nil || *detectorIPStruct.IsINBlackList {
		log.Println("üíî error get ip info2", err)
		return nil, "", err
	}
	geoInfo := ""
	if detectorIPStruct.RegionInfo != nil {
		countryCode := ""
		if detectorIPStruct.RegionInfo.CountryCode != nil {
			countryCode = *detectorIPStruct.RegionInfo.CountryCode
		} else {
			err := errors.New("error detect CountryCode")
			log.Println("üíî error get ip info4", err)
		}
		city := ""
		if detectorIPStruct.RegionInfo.City != nil {
			city = *detectorIPStruct.RegionInfo.City
		} else {
			err := errors.New("error detect City")
			log.Println("üíî error get ip info5", err)
		}
		region := ""
		if detectorIPStruct.RegionInfo.Region != nil {
			region = *detectorIPStruct.RegionInfo.Region
		} else {
			err := errors.New("error detect Region")
			log.Println("üíî error get ip info6", err)
		}
		detectIpEq := false
		if detectorIPStruct.IP != nil {
			detectIpEq = *detectorIPStruct.IP == ip
		} else {
			err := errors.New("error detect IP")
			log.Println("üíî error get ip info7", err)
		}

		geoInfo = fmt.Sprintf("CountryCode: %s, City: %s, Region: %s |%t|", countryCode, city, region, detectIpEq)
	} else {
		err := errors.New("error get ip info3")
		log.Println("üíî error get ip info3", err)
	}
	return detectorIPStruct, geoInfo, nil
}
