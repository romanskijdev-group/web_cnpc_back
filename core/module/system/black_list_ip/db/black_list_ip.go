package blacklistipdb

import (
	"cnpc_backend/core/typescore"
	dbutils "cnpc_backend/core/utilscore/db"
	"context"
	"fmt"
	"reflect"

	"github.com/Masterminds/squirrel"
)

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ Ip –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ
func (m *ModuleDB) GetBlackListIPDB(ctx context.Context, paramsFiltering *typescore.BlackListIP) ([]*typescore.BlackListIP, *typescore.WEvent) {
	// logrus.Info("üü® GetBlackListIPDB")
	var blackIps []*typescore.BlackListIP

	fields := dbutils.GetStructFieldsDB(&typescore.BlackListIP{}, nil)

	query := squirrel.StatementBuilder.PlaceholderFormat(squirrel.Dollar).
		Select(fields...).From(TableName)

	sql, args, err := dbutils.AddNonNullFieldsToQueryWhere(query, paramsFiltering, map[string]string{}, nil).ToSql()
	if err != nil {
		return blackIps, &typescore.WEvent{
			Err:  err,
			Text: "db_system_error",
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞
	conn, err := m.DatabasePull.Acquire(ctx)
	if err != nil {
		return nil, &typescore.WEvent{
			Err:  fmt.Errorf("failed_to_acquire_connection: %v", err),
			Text: "failed_to_acquire_connection",
		}
	}
	defer conn.Release() // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	rows, err := conn.Query(ctx, sql, args...)
	if err != nil {
		println(err.Error())
		// TODO: –ü–æ—á–∏–Ω–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞
		return blackIps, &typescore.WEvent{
			Err:  err,
			Text: "db_system_error",
		}
	}
	defer rows.Close()

	for rows.Next() {
		blackIPItem := &typescore.BlackListIP{}
		errShr := dbutils.ScanRowsToStructRows(rows, blackIPItem)
		if errShr != nil {
			continue
		}
		blackIps = append(blackIps, blackIPItem)
	}

	if err = rows.Err(); err != nil {
		return blackIps, nil
	}

	return blackIps, nil
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ IP –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
func (m *ModuleDB) AddIPToBlackListDB(ctx context.Context, blackIPItem *typescore.BlackListIP) (*typescore.BlackListIP, *typescore.WEvent) {
	// logrus.Info("üü® AddIPToBlackListDB")

	query := squirrel.StatementBuilder.PlaceholderFormat(squirrel.Dollar).Insert(TableName)

	// –°–æ–∑–¥–∞–µ–º –¥–≤–∞ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
	var columns []string
	var values []interface{}

	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–Ω—É–ª–µ–≤—ã–µ –ø–æ–ª—è –≤ —Å–ø–∏—Å–∫–∏
	v := reflect.ValueOf(*blackIPItem)
	t := v.Type()

	for i := 0; i < v.NumField(); i++ {
		field := v.Field(i)

		if (field.Kind() == reflect.Ptr && !field.IsNil()) || (field.Kind() != reflect.Ptr && !field.IsZero()) {
			ignoreDbTag := t.Field(i).Tag.Get("ignore_db")
			if ignoreDbTag == "true" {
				continue
			}
			dbTag := t.Field(i).Tag.Get("db")
			columns = append(columns, dbTag)
			values = append(values, field.Interface())
		}
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –ø–æ–ª–µ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
	if len(columns) == 0 {
		return nil, &typescore.WEvent{
			Err:  fmt.Errorf("missing_required_fields"),
			Text: "missing_required_fields",
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–ø—Ä–æ—Å
	query = query.Columns(columns...).Values(values...)

	sql, args, err := query.ToSql()
	if err != nil { // errW := m.ipc.Modules.SystemControl.WrapEvent(err, "db_system_error")
		return nil, &typescore.WEvent{
			Err:  err,
			Text: "db_system_error",
		}
		// m.ipc.Modules.SystemControl.ErrorEvent(errW)
	}
	// –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞
	conn, err := m.DatabasePull.Acquire(ctx)
	if err != nil {
		return nil, &typescore.WEvent{
			Err:  fmt.Errorf("failed_to_acquire_connection: %v", err),
			Text: "failed_to_acquire_connection",
		}
	}
	defer conn.Release() // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	_, err = conn.Exec(ctx, sql, args...)
	if err != nil { // errW := m.ipc.Modules.SystemControl.WrapEvent(err, "db_system_error")
		// return nil, m.ipc.Modules.SystemControl.ErrorEvent(errW)
		return nil, &typescore.WEvent{
			Err:  err,
			Text: "db_system_error",
		}
	}

	return blackIPItem, nil
}
