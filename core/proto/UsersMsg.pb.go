// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.27.1
// source: messages/UsersMsg.proto

package protoobj

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UsersMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemId            *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`                                   // Системный идентификатор записи
	SerialId            *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=serial_id,json=serialId,proto3" json:"serial_id,omitempty"`                                   // Уникальный порядковый идентификатор записи
	Role                UserRole                `protobuf:"varint,3,opt,name=role,proto3,enum=msg.UserRole" json:"role,omitempty"`                                        // Роль пользователя
	TelegramId          *wrapperspb.Int64Value  `protobuf:"bytes,4,opt,name=telegram_id,json=telegramId,proto3" json:"telegram_id,omitempty"`                             // Идентификатор пользователя в Telegram
	VkId                *wrapperspb.Int64Value  `protobuf:"bytes,5,opt,name=vk_id,json=vkId,proto3" json:"vk_id,omitempty"`                                               // Идентификатор пользователя в Telegram
	Email               *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`                                                         // Системный идентификатор записи
	Nickname            *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=nickname,proto3" json:"nickname,omitempty"`                                                   // Псевдоним или никнейм пользователя
	FirstName           *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`                                // Имя пользователя
	LastName            *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`                                   // Фамилия пользователя
	Bio                 *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=bio,proto3" json:"bio,omitempty"`                                                            // Фамилия пользователя
	Gender              *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=gender,proto3" json:"gender,omitempty"`                                                      // Пол
	BirthDate           *timestamppb.Timestamp  `protobuf:"bytes,12,opt,name=birth_date,json=birthDate,proto3" json:"birth_date,omitempty"`                               // Дата рождения пользователя
	PhoneNumber         *wrapperspb.UInt64Value `protobuf:"bytes,13,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`                         // Пол
	AvatarUrl           *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`                               // Пол
	Language            *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=language,proto3" json:"language,omitempty"`                                                  // Язык настроек пользователя
	NotificationEnabled *wrapperspb.BoolValue   `protobuf:"bytes,16,opt,name=notification_enabled,json=notificationEnabled,proto3" json:"notification_enabled,omitempty"` // Включены ли уведомлений
	IsBlocked           *wrapperspb.BoolValue   `protobuf:"bytes,17,opt,name=is_blocked,json=isBlocked,proto3" json:"is_blocked,omitempty"`                               // Залочен ли пользователь(заблокирован или нет)
	ReferralId          *wrapperspb.StringValue `protobuf:"bytes,18,opt,name=referral_id,json=referralId,proto3" json:"referral_id,omitempty"`                            // Идентификатор реферала пригласившего пользователя
	ReferralCode        *wrapperspb.StringValue `protobuf:"bytes,19,opt,name=referral_code,json=referralCode,proto3" json:"referral_code,omitempty"`                      // Идентификатор реферала пригласившего пользователя
	LastIp              *wrapperspb.StringValue `protobuf:"bytes,20,opt,name=last_ip,json=lastIp,proto3" json:"last_ip,omitempty"`                                        // Идентификатор реферала пригласившего пользователя
	CreatedAt           *timestamppb.Timestamp  `protobuf:"bytes,21,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                               // Дата и время создания записи
	LastLogin           *timestamppb.Timestamp  `protobuf:"bytes,22,opt,name=last_login,json=lastLogin,proto3" json:"last_login,omitempty"`                               // Дата последнего входа пользователя
	IsOnline            *wrapperspb.BoolValue   `protobuf:"bytes,23,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`                                  // Залочен ли пользователь(заблокирован или нет)
	LastOnline          *timestamppb.Timestamp  `protobuf:"bytes,24,opt,name=last_online,json=lastOnline,proto3" json:"last_online,omitempty"`                            // Дата последнего входа пользователя
}

func (x *UsersMsg) Reset() {
	*x = UsersMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_UsersMsg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersMsg) ProtoMessage() {}

func (x *UsersMsg) ProtoReflect() protoreflect.Message {
	mi := &file_messages_UsersMsg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersMsg.ProtoReflect.Descriptor instead.
func (*UsersMsg) Descriptor() ([]byte, []int) {
	return file_messages_UsersMsg_proto_rawDescGZIP(), []int{0}
}

func (x *UsersMsg) GetSystemId() *wrapperspb.StringValue {
	if x != nil {
		return x.SystemId
	}
	return nil
}

func (x *UsersMsg) GetSerialId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.SerialId
	}
	return nil
}

func (x *UsersMsg) GetRole() UserRole {
	if x != nil {
		return x.Role
	}
	return UserRole_USER
}

func (x *UsersMsg) GetTelegramId() *wrapperspb.Int64Value {
	if x != nil {
		return x.TelegramId
	}
	return nil
}

func (x *UsersMsg) GetVkId() *wrapperspb.Int64Value {
	if x != nil {
		return x.VkId
	}
	return nil
}

func (x *UsersMsg) GetEmail() *wrapperspb.StringValue {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *UsersMsg) GetNickname() *wrapperspb.StringValue {
	if x != nil {
		return x.Nickname
	}
	return nil
}

func (x *UsersMsg) GetFirstName() *wrapperspb.StringValue {
	if x != nil {
		return x.FirstName
	}
	return nil
}

func (x *UsersMsg) GetLastName() *wrapperspb.StringValue {
	if x != nil {
		return x.LastName
	}
	return nil
}

func (x *UsersMsg) GetBio() *wrapperspb.StringValue {
	if x != nil {
		return x.Bio
	}
	return nil
}

func (x *UsersMsg) GetGender() *wrapperspb.StringValue {
	if x != nil {
		return x.Gender
	}
	return nil
}

func (x *UsersMsg) GetBirthDate() *timestamppb.Timestamp {
	if x != nil {
		return x.BirthDate
	}
	return nil
}

func (x *UsersMsg) GetPhoneNumber() *wrapperspb.UInt64Value {
	if x != nil {
		return x.PhoneNumber
	}
	return nil
}

func (x *UsersMsg) GetAvatarUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.AvatarUrl
	}
	return nil
}

func (x *UsersMsg) GetLanguage() *wrapperspb.StringValue {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *UsersMsg) GetNotificationEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.NotificationEnabled
	}
	return nil
}

func (x *UsersMsg) GetIsBlocked() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsBlocked
	}
	return nil
}

func (x *UsersMsg) GetReferralId() *wrapperspb.StringValue {
	if x != nil {
		return x.ReferralId
	}
	return nil
}

func (x *UsersMsg) GetReferralCode() *wrapperspb.StringValue {
	if x != nil {
		return x.ReferralCode
	}
	return nil
}

func (x *UsersMsg) GetLastIp() *wrapperspb.StringValue {
	if x != nil {
		return x.LastIp
	}
	return nil
}

func (x *UsersMsg) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UsersMsg) GetLastLogin() *timestamppb.Timestamp {
	if x != nil {
		return x.LastLogin
	}
	return nil
}

func (x *UsersMsg) GetIsOnline() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsOnline
	}
	return nil
}

func (x *UsersMsg) GetLastOnline() *timestamppb.Timestamp {
	if x != nil {
		return x.LastOnline
	}
	return nil
}

type UsersMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParamsFiltering *UsersMsg               `protobuf:"bytes,1,opt,name=paramsFiltering,proto3" json:"paramsFiltering,omitempty"`
	Offset          *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit           *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=limit,proto3" json:"limit,omitempty"`
	LikeFields      map[string]string       `protobuf:"bytes,4,rep,name=likeFields,proto3" json:"likeFields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UsersMsgReq) Reset() {
	*x = UsersMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messages_UsersMsg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersMsgReq) ProtoMessage() {}

func (x *UsersMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_messages_UsersMsg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersMsgReq.ProtoReflect.Descriptor instead.
func (*UsersMsgReq) Descriptor() ([]byte, []int) {
	return file_messages_UsersMsg_proto_rawDescGZIP(), []int{1}
}

func (x *UsersMsgReq) GetParamsFiltering() *UsersMsg {
	if x != nil {
		return x.ParamsFiltering
	}
	return nil
}

func (x *UsersMsgReq) GetOffset() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *UsersMsgReq) GetLimit() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *UsersMsgReq) GetLikeFields() map[string]string {
	if x != nil {
		return x.LikeFields
	}
	return nil
}

var File_messages_UsersMsg_proto protoreflect.FileDescriptor

var file_messages_UsersMsg_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x4d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6d, 0x73, 0x67, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x0b, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4d,
	0x73, 0x67, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x39, 0x0a,
	0x09, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x74,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x76, 0x6b, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x38, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x03, 0x62, 0x69, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x62, 0x69,
	0x6f, 0x12, 0x34, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c,
	0x12, 0x38, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69, 0x73, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69,
	0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x70, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c,
	0x61, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xb1, 0x02, 0x0a, 0x0b, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x0f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4d, 0x73,
	0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x34, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x0a,
	0x6c, 0x69, 0x6b, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4d, 0x73, 0x67, 0x52,
	0x65, 0x71, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x3d,
	0x0a, 0x0f, 0x4c, 0x69, 0x6b, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x12, 0x5a,
	0x10, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x6f, 0x62,
	0x6a, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_messages_UsersMsg_proto_rawDescOnce sync.Once
	file_messages_UsersMsg_proto_rawDescData = file_messages_UsersMsg_proto_rawDesc
)

func file_messages_UsersMsg_proto_rawDescGZIP() []byte {
	file_messages_UsersMsg_proto_rawDescOnce.Do(func() {
		file_messages_UsersMsg_proto_rawDescData = protoimpl.X.CompressGZIP(file_messages_UsersMsg_proto_rawDescData)
	})
	return file_messages_UsersMsg_proto_rawDescData
}

var file_messages_UsersMsg_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_messages_UsersMsg_proto_goTypes = []interface{}{
	(*UsersMsg)(nil),               // 0: msg.UsersMsg
	(*UsersMsgReq)(nil),            // 1: msg.UsersMsgReq
	nil,                            // 2: msg.UsersMsgReq.LikeFieldsEntry
	(*wrapperspb.StringValue)(nil), // 3: google.protobuf.StringValue
	(*wrapperspb.UInt64Value)(nil), // 4: google.protobuf.UInt64Value
	(UserRole)(0),                  // 5: msg.UserRole
	(*wrapperspb.Int64Value)(nil),  // 6: google.protobuf.Int64Value
	(*timestamppb.Timestamp)(nil),  // 7: google.protobuf.Timestamp
	(*wrapperspb.BoolValue)(nil),   // 8: google.protobuf.BoolValue
}
var file_messages_UsersMsg_proto_depIdxs = []int32{
	3,  // 0: msg.UsersMsg.system_id:type_name -> google.protobuf.StringValue
	4,  // 1: msg.UsersMsg.serial_id:type_name -> google.protobuf.UInt64Value
	5,  // 2: msg.UsersMsg.role:type_name -> msg.UserRole
	6,  // 3: msg.UsersMsg.telegram_id:type_name -> google.protobuf.Int64Value
	6,  // 4: msg.UsersMsg.vk_id:type_name -> google.protobuf.Int64Value
	3,  // 5: msg.UsersMsg.email:type_name -> google.protobuf.StringValue
	3,  // 6: msg.UsersMsg.nickname:type_name -> google.protobuf.StringValue
	3,  // 7: msg.UsersMsg.first_name:type_name -> google.protobuf.StringValue
	3,  // 8: msg.UsersMsg.last_name:type_name -> google.protobuf.StringValue
	3,  // 9: msg.UsersMsg.bio:type_name -> google.protobuf.StringValue
	3,  // 10: msg.UsersMsg.gender:type_name -> google.protobuf.StringValue
	7,  // 11: msg.UsersMsg.birth_date:type_name -> google.protobuf.Timestamp
	4,  // 12: msg.UsersMsg.phone_number:type_name -> google.protobuf.UInt64Value
	3,  // 13: msg.UsersMsg.avatar_url:type_name -> google.protobuf.StringValue
	3,  // 14: msg.UsersMsg.language:type_name -> google.protobuf.StringValue
	8,  // 15: msg.UsersMsg.notification_enabled:type_name -> google.protobuf.BoolValue
	8,  // 16: msg.UsersMsg.is_blocked:type_name -> google.protobuf.BoolValue
	3,  // 17: msg.UsersMsg.referral_id:type_name -> google.protobuf.StringValue
	3,  // 18: msg.UsersMsg.referral_code:type_name -> google.protobuf.StringValue
	3,  // 19: msg.UsersMsg.last_ip:type_name -> google.protobuf.StringValue
	7,  // 20: msg.UsersMsg.created_at:type_name -> google.protobuf.Timestamp
	7,  // 21: msg.UsersMsg.last_login:type_name -> google.protobuf.Timestamp
	8,  // 22: msg.UsersMsg.is_online:type_name -> google.protobuf.BoolValue
	7,  // 23: msg.UsersMsg.last_online:type_name -> google.protobuf.Timestamp
	0,  // 24: msg.UsersMsgReq.paramsFiltering:type_name -> msg.UsersMsg
	4,  // 25: msg.UsersMsgReq.offset:type_name -> google.protobuf.UInt64Value
	4,  // 26: msg.UsersMsgReq.limit:type_name -> google.protobuf.UInt64Value
	2,  // 27: msg.UsersMsgReq.likeFields:type_name -> msg.UsersMsgReq.LikeFieldsEntry
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_messages_UsersMsg_proto_init() }
func file_messages_UsersMsg_proto_init() {
	if File_messages_UsersMsg_proto != nil {
		return
	}
	file_enums_UserRole_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_messages_UsersMsg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messages_UsersMsg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messages_UsersMsg_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_UsersMsg_proto_goTypes,
		DependencyIndexes: file_messages_UsersMsg_proto_depIdxs,
		MessageInfos:      file_messages_UsersMsg_proto_msgTypes,
	}.Build()
	File_messages_UsersMsg_proto = out.File
	file_messages_UsersMsg_proto_rawDesc = nil
	file_messages_UsersMsg_proto_goTypes = nil
	file_messages_UsersMsg_proto_depIdxs = nil
}
