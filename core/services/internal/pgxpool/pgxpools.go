package pgxpool

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/sirupsen/logrus"
)

type ConfigConnectPgxPool struct {
	Host     string
	Port     string
	User     string
	Password string
	Name     string
}

func ConnectDB(configObj *ConfigConnectPgxPool) *pgxpool.Pool {
	logrus.Info("üü® ConnectDB")
	connStr := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s sslmode=disable",
		configObj.Host,
		configObj.Port,
		configObj.User,
		configObj.Password,
		configObj.Name)

	configDB, err := pgxpool.ParseConfig(connStr)
	if err != nil {
		log.Fatal("üìõ error: failed to parse config: ", err)
		return nil
	}

	// –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞
	configDB.MaxConns = 50                        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ
	configDB.MinConns = 5                         // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä–æ–µ –ø—É–ª –±—É–¥–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å
	configDB.MaxConnLifetime = time.Second * 45   // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ
	configDB.MaxConnIdleTime = time.Second * 45   // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –æ–Ω–æ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ
	configDB.HealthCheckPeriod = time.Second * 15 // –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ

	pool, err := pgxpool.NewWithConfig(context.Background(), configDB)
	if err != nil {
		log.Fatal("üìõ error: failed to connect to database: ", err)
		return nil
	}

	return pool
}
