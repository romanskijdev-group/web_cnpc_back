package awss3api

import (
	"io"
	"log"
	"net/http"
	"sync"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/credentials"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/s3"
)

var (
	ClientStorage     *s3.S3
	onceClientStorage sync.Once
)

type AWSS3CloudStorageI interface { // —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ AWS S3.
	DeleteFile(path, fileName string) (string, error)
	// —É–¥–∞–ª—è–µ—Ç –ø–∞–ø–∫—É –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ AWS S3.
	DeleteFolder(path string) (string, error)
	//  –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ AWS S3 –∏ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.
	UploadFilePrivate(reader io.Reader, path, fileName string) (string, error)
	//  –ø–æ—Ç–æ–∫–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ AWS S3.
	StreamFile(w http.ResponseWriter, path, fileName string) (http.ResponseWriter, error)
	//  –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ AWS S3 –∏ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –ø—É–±–ª–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º.
	UploadPublicFile(reader io.Reader, path, fileName string) (string, error)
	// –ü–æ–ª—É—á–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ S3 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–∞–∫ io.ReadCloser.
	GetFileFromS3(path, fileName string) (io.ReadCloser, error)
}

type StorageConfigSt struct {
	Key      string `yaml:"key" env-required:"true"`
	Secret   string `yaml:"secret" env-required:"true"`
	Region   string `yaml:"region" env-required:"true"`
	Endpoint string `yaml:"endpoint" env-required:"true"`
	Bucket   string `yaml:"bucket" env-required:"true"`
	RunMode  string `yaml:"run_mode" env-required:"true"`
}

type AWSS3CloudStorageImpl struct {
	StorageConfig StorageConfigSt
	ClientStorage *s3.S3
}

func NewAWSS3CloudStorage(storageConfig StorageConfigSt) AWSS3CloudStorageI {
	// logrus.Info("üü® NewAWSS3CloudStorage")
	return &AWSS3CloudStorageImpl{
		StorageConfig: storageConfig,
		ClientStorage: GetClient(storageConfig),
	}
}

func GetClient(storageConfig StorageConfigSt) *s3.S3 {
	onceClientStorage.Do(func() {
		ClientStorage = createClient(storageConfig)
	})
	return ClientStorage
}

func createClient(storageConfig StorageConfigSt) *s3.S3 {
	// logrus.Info("üü® createClient")
	s3Config := &aws.Config{
		Credentials:      credentials.NewStaticCredentials(storageConfig.Key, storageConfig.Secret, ""),
		Endpoint:         aws.String(storageConfig.Endpoint),
		S3ForcePathStyle: aws.Bool(false),
		Region:           aws.String(storageConfig.Region),
	}
	newSession, err := session.NewSession(s3Config)
	if err != nil {
		log.Fatalf("Failed to create session: %v", err)
		return nil
	}
	s3Client := s3.New(newSession)
	return s3Client
}
