package alicloudossapi

import (
	"io"
	"log"
	"net/http"
	"sync"

	"github.com/aliyun/aliyun-oss-go-sdk/oss"
)

var (
	ClientStorage     *oss.Bucket
	onceClientStorage sync.Once
)

type AliCloudOSSStorageI interface { // —É–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ AWS S3.
	DeleteFile(path, fileName string) (string, error)
	// —É–¥–∞–ª—è–µ—Ç –ø–∞–ø–∫—É –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ AWS S3.
	DeleteFolder(path string) (string, error)
	//  –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ AWS S3 –∏ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.
	UploadFilePrivate(reader io.Reader, path, fileName string) (string, error)
	//  –ø–æ—Ç–æ–∫–æ–≤–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ AWS S3.
	StreamFile(w http.ResponseWriter, objectName string) (http.ResponseWriter, error)
	//  –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ AWS S3 –∏ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –ø—É–±–ª–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º.
	UploadPublicFile(reader io.Reader, path, fileName string) (string, error)

	// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ –±–∞–π—Ç–æ–≤.
	GetFileContentAsBytes(objectName string) ([]byte, error)
}

type StorageConfigSt struct {
	Key      string `yaml:"key" env-required:"true"`
	Secret   string `yaml:"secret" env-required:"true"`
	Endpoint string `yaml:"endpoint" env-required:"true"`
	Bucket   string `yaml:"bucket" env-required:"true"`
}

type AliCloudOSSStorageImpl struct {
	StorageConfig StorageConfigSt
	ClientStorage *oss.Bucket
}

func NewAliCloudOSSStorage(storageConfig StorageConfigSt) AliCloudOSSStorageI {
	// logrus.Info("üü® NewAliCloudOSSStorage")
	return &AliCloudOSSStorageImpl{
		StorageConfig: storageConfig,
		ClientStorage: GetClient(storageConfig),
	}
}

func GetClient(storageConfig StorageConfigSt) *oss.Bucket {
	onceClientStorage.Do(func() {
		ClientStorage = createClient(storageConfig)
	})
	return ClientStorage
}

func createClient(storageConfig StorageConfigSt) *oss.Bucket {
	// logrus.Info("üü® createClient")
	client, err := oss.New(storageConfig.Endpoint,
		storageConfig.Key, storageConfig.Secret)
	if err != nil {
		log.Fatalf("failed to create session AliCloudOSS: %v", err)
		return nil
	}

	bucket, err := client.Bucket(storageConfig.Bucket)
	if err != nil {
		log.Fatalf("error connect bucket AliCloudOSS: %s %v", storageConfig.Bucket, err)
	}
	return bucket
}
